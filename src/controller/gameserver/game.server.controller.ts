import { GameServer, GameServerData, GameServerUser } from '.prisma/client';
import { Get, Post, Body, Put, Delete, Param, Query, Controller, UsePipes,ParseIntPipe } from '@nestjs/common';
import { ApiBearerAuth, ApiOperation, ApiResponse, ApiTags, ApiParam } from '@nestjs/swagger';
import { GameServerService } from '../../service/gameserver/game.server.service';
import GameServerCreateParams from '../../service/gameserver/model/game.server.create.params';
import GameServerUpdateParams from '../../service/gameserver/model/game.server.update.params';
import JoinGameParams from '../../service/gameserver/model/join.game.params';
import RejoinGameParams from '../../service/gameserver/model/rejoin.game.params';


@ApiBearerAuth()
@ApiTags('game-servers')
@Controller('game-servers')
export class GameServerController {
  constructor(private readonly gameServerService: GameServerService) {}

  @ApiOperation({ summary: 'Get all game servers' })
  @ApiResponse({ status: 200, description: 'Return all game servers.'})
  @Get('')
  async findAll(): Promise<GameServerData[]> {
    return await this.gameServerService.findAllGameServer(null,null);
  }

  @ApiOperation({ summary: 'Get all game server users' })
  @ApiResponse({ status: 200, description: 'Return all game server users.'})
  @Get('users')
  async findAllGameServerUser(): Promise<GameServerUser[]> {
    return await this.gameServerService.findAllGameServerUser(null,null);
  }

  @ApiOperation({ summary: 'Get all game servers' })
  @ApiResponse({ status: 200, description: 'Return all game servers.'})
  @Get('data')
  async findAllData(): Promise<GameServerData[]> {
    return await this.gameServerService.findAllGameServerData(null,null);
  }

  @ApiOperation({ summary: 'Find game server by id.' })
  @ApiParam({ name: "id", description: "Unique numeric game server id generated by the system for the game servers.", required: false, allowEmptyValue: false })
  @ApiResponse({ status: 200, description: 'Return game server found by id..' })
  @Get(':id')
  async findById(@Param('id', ParseIntPipe) id: number): Promise<GameServer> {
    return await this.gameServerService.findGameServerById(id);
  }

  @ApiOperation({ summary: 'Process game server by id.' })
  @ApiParam({ name: "id", description: "Unique numeric game server id generated by the system for the game servers.", required: false, allowEmptyValue: false })
  @ApiResponse({ status: 200, description: 'Return game serverdata processed..' })
  @Get('process/:id')
  async processGameServer(@Param('id', ParseIntPipe) id: number): Promise<GameServerData> {
    return await this.gameServerService.processGameServer(id);
  }

  @ApiOperation({ summary: 'Create game server' })
  @ApiResponse({ status: 201, description: 'The game server has been successfully created.' })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Post()
  async createGameServer(@Body() gameServerCreateParams: GameServerCreateParams) {
    return await this.gameServerService.createGameServer(gameServerCreateParams);
  }

  @ApiOperation({ summary: 'Update game server' })
  @ApiResponse({ status: 201, description: 'The game server has been successfully updated.' })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Put()
  async updateGameServer(@Body() gameServerUpdateParams: GameServerUpdateParams) {
    return await this.gameServerService.updateGameServer(gameServerUpdateParams);
  }

  @ApiOperation({ summary: 'Join a game' })
  @ApiResponse({ status: 201, description: 'The user has joined the game successfully.' })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Post('rejoin')
  async rejoinGame(@Body() rejoinGameParams: RejoinGameParams) {
    return await this.gameServerService.rejoinGame(rejoinGameParams);
  }

  @ApiOperation({ summary: 'Join a game' })
  @ApiResponse({ status: 201, description: 'The user has joined the game successfully.' })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Post('join')
  async joinGame(@Body() joinGameParams: JoinGameParams) {
    return await this.gameServerService.joinGame(joinGameParams);
  }

}