import { Injectable } from '@nestjs/common';
import { BigNumber } from 'bignumber.js';
import * as CryptoJS from 'crypto-js';
import { AppSettingsService } from '../util/app-settings.service';
import { UtilService } from '../util/util.service';
import { BananoWalletService } from '../banano/banano.wallet.service';
import { WalletPersistenceService } from './wallet.persistence.service';

import { WalletTypes, WalletType, BaseApiAccount, FullWallet, WalletAccount, WalletApiAccount } from "../banano/banano.wallet.interface";
import { WalletCreateDto } from '../../dto/wallet/wallet.create.dto';
import { WalletDto } from '../../dto/wallet';
import { AccountCreateDto } from '../../dto/account';


@Injectable()
export class WalletService {
 
  constructor(private utilService: UtilService,
    private bananoWalletService: BananoWalletService,
    private walletPersistenceService: WalletPersistenceService) { }


  /**
   * When a new wallet is created, a new Banano seed will be generated which can be used to create brand new accounts 
   * on the Banano network. The Banano seed is the master key to all of associated accounts and any money inside of them!
   * @returns 
   */
  async createWallet(userId: number, walletDto : WalletCreateDto): Promise<any> {

    let wallet = await this.walletPersistenceService.createWallet(userId, walletDto);
    return wallet;
  }

  async generateWallet(userId: number): Promise<any> {
    let seed;
    let seedBytes = this.utilService.account.generateSeedBytes();
    seed = this.utilService.hex.fromUint8(seedBytes);
    let wallet = await  this.generateWalletWithSeed(userId, seed);
    return wallet;
  }

  async generateWalletWithSeed(userId: number,seed: string): Promise<any> {
    
    let bananoWallet = await this.bananoWalletService.createWallet(userId,seed);

    let walletDto = new WalletCreateDto();
    walletDto.name = 'generated_banano_wallet_' + Math.random();
    walletDto.description = 'wallet genereated by the system';
    walletDto.deleted = false;
    walletDto.enabled = true;
    walletDto.seed = seed;
    walletDto.mnemonic = '';
    walletDto.userId = userId;
    
    let bananoAccounts = bananoWallet.accounts;
    
    if(bananoAccounts && bananoAccounts.length > 0) {
      let accountDtos = new Array<AccountCreateDto>();
      bananoAccounts.forEach(function (bananoAccount) {
        let accountCreateDto = new  AccountCreateDto();
        accountCreateDto.name = bananoAccount.id,
        accountCreateDto.address = bananoAccount.id,
        accountCreateDto.description = 'This account generated by the system',
        accountCreateDto.enabled = true,
        accountCreateDto.deleted = false,
        accountCreateDto.walletId = 0,
        accountDtos.push(accountCreateDto);
      });
      walletDto.accounts = accountDtos;
    }

    let wallet = await  this.createWallet(userId, walletDto);
    return wallet;
  }
}